import{s as H,n as g}from"./scheduler.c83dfd02.js";import{S as L,i as C,g as u,s as h,H as M,h as i,A as b,c as x,j as P,B as j,f as a,k as q,a as e}from"./index.bdcb1ddf.js";function I(E){let t,v="You can use Erlangâ€™s <code>tc</code> function to see how many microseconds a function takes.  For example, say you were curious if <code>Enum.filter/2</code> or <code>Kernel.--/2</code> took longer:",r,p,_="Example:",k,o,m,w=`<code class="language-elixir">$iex<span class="token operator">></span> vals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
$iex<span class="token operator">></span> <span class="token atom symbol">:timer</span><span class="token punctuation">.</span><span class="token function">tc</span><span class="token punctuation">(</span><span class="token module class-name">Enum</span><span class="token punctuation">,</span> <span class="token atom symbol">:filter</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>vals<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token function">rem</span><span class="token punctuation">(</span><span class="token argument variable">&amp;1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>

$iex<span class="token operator">></span> <span class="token atom symbol">:timer</span><span class="token punctuation">.</span><span class="token function">tc</span><span class="token punctuation">(</span><span class="token module class-name">Kernel</span><span class="token punctuation">,</span> :<span class="token operator">--</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>vals<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code>`,d,c,y="<code>Kernel.--</code> or <code>vals -- [2, 4]</code> took 3 micro seconds while <code>Enum.filter/2</code> (<code>Enum.filter(vals, &amp; &amp;1rem(&amp;1, 2) == 1)</code>) took 20.",f,l,T=`This is a fairly trivial example but I could see this coming in handy with larger operations.
For more detailed analysis you can always use <a href="https://github.com/bencheeorg/benchee" rel="nofollow">Benchee</a>.
Thanks to <a href="https://til.hashrocket.com/posts/9jxsfxysey-timing-a-function-in-elixir" rel="nofollow">chriserin</a> for helping me get the right Erlang syntax for <code>tc</code>`;return{c(){t=u("p"),t.innerHTML=v,r=h(),p=u("p"),p.textContent=_,k=h(),o=u("pre"),m=new M(!1),d=h(),c=u("p"),c.innerHTML=y,f=h(),l=u("p"),l.innerHTML=T,this.h()},l(n){t=i(n,"P",{"data-svelte-h":!0}),b(t)!=="svelte-1qbfj5c"&&(t.innerHTML=v),r=x(n),p=i(n,"P",{"data-svelte-h":!0}),b(p)!=="svelte-8pgdxg"&&(p.textContent=_),k=x(n),o=i(n,"PRE",{class:!0});var s=P(o);m=j(s,!1),s.forEach(a),d=x(n),c=i(n,"P",{"data-svelte-h":!0}),b(c)!=="svelte-kasxeq"&&(c.innerHTML=y),f=x(n),l=i(n,"P",{"data-svelte-h":!0}),b(l)!=="svelte-1k14b6d"&&(l.innerHTML=T),this.h()},h(){m.a=null,q(o,"class","language-elixir")},m(n,s){e(n,t,s),e(n,r,s),e(n,p,s),e(n,k,s),e(n,o,s),m.m(w,o),e(n,d,s),e(n,c,s),e(n,f,s),e(n,l,s)},p:g,i:g,o:g,d(n){n&&(a(t),a(r),a(p),a(k),a(o),a(d),a(c),a(f),a(l))}}}const B={title:"Today I Learned ~D[2024-01-03]",hero:"",alt:"",date:"2024-01-03",tags:["TIL","Elixir","Programming"]};class F extends L{constructor(t){super(),C(this,t,null,I,H,{})}}export{F as default,B as metadata};
